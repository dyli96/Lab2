
3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00000c36  00000cca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080018e  0080018e  00000d58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba7  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000879  00000000  00000000  00001a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e5  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  0000286c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ad  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00002ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000351a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_10>
  2c:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_11>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_13>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  68:	a0 00       	.word	0x00a0	; ????
  6a:	aa 00       	.word	0x00aa	; ????
  6c:	b3 00       	.word	0x00b3	; ????
  6e:	bc 00       	.word	0x00bc	; ????
  70:	c5 00       	.word	0x00c5	; ????
  72:	ce 00       	.word	0x00ce	; ????
  74:	d7 00       	.word	0x00d7	; ????
  76:	0a 01       	movw	r0, r20
  78:	0d 01       	movw	r0, r26
  7a:	10 01       	movw	r2, r0
  7c:	13 01       	movw	r2, r6
  7e:	16 01       	movw	r2, r12
  80:	19 01       	movw	r2, r18
  82:	1c 01       	movw	r2, r24

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf ef       	ldi	r28, 0xFF	; 255
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	e6 e3       	ldi	r30, 0x36	; 54
  98:	fc e0       	ldi	r31, 0x0C	; 12
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	ae 38       	cpi	r26, 0x8E	; 142
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	ae e8       	ldi	r26, 0x8E	; 142
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a6 3a       	cpi	r26, 0xA6	; 166
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  ba:	0c 94 19 06 	jmp	0xc32	; 0xc32 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	19 f4       	brne	.+6      	; 0xd0 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  d0:	e0 ec       	ldi	r30, 0xC0	; 192
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	85 ff       	sbrs	r24, 5
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <uart_putchar+0x12>
	UDR0 = c;
  da:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <uart_getchar+0x4>
	return UDR0;
  f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 102:	e0 ec       	ldi	r30, 0xC0	; 192
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
 118:	e0 ea       	ldi	r30, 0xA0	; 160
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	93 83       	std	Z+3, r25	; 0x03
 122:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	91 83       	std	Z+1, r25	; 0x01
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <GenerateVol>:
int fl;


void GenerateVol(int Val){
	//_delay_ms(1000);
	switch (Val){
 12e:	87 30       	cpi	r24, 0x07	; 7
 130:	91 05       	cpc	r25, r1
 132:	08 f0       	brcs	.+2      	; 0x136 <GenerateVol+0x8>
 134:	45 c0       	rjmp	.+138    	; 0x1c0 <GenerateVol+0x92>
 136:	fc 01       	movw	r30, r24
 138:	ec 5c       	subi	r30, 0xCC	; 204
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__tablejump2__>

		case 0:
		
		PORTB &= 0xE3;
 140:	85 b1       	in	r24, 0x05	; 5
 142:	83 7e       	andi	r24, 0xE3	; 227
 144:	85 b9       	out	0x05, r24	; 5
		PORTB |= (0 << PORTB2) | ( 0<< PORTB3) | (0 << PORTB4);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	85 b9       	out	0x05, r24	; 5
		printf("case 0\n");
 14a:	8d e1       	ldi	r24, 0x1D	; 29
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 152:	08 95       	ret

		case 1:
		
		PORTB &= 0xE7;
 154:	85 b1       	in	r24, 0x05	; 5
 156:	87 7e       	andi	r24, 0xE7	; 231
 158:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1 << PORTB2) | ( 0<< PORTB3) | (0 << PORTB4);
 15a:	2a 9a       	sbi	0x05, 2	; 5
		printf("case 1\n");
 15c:	84 e2       	ldi	r24, 0x24	; 36
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 164:	08 95       	ret

		case 2:
		
		PORTB &= 0xEB;
 166:	85 b1       	in	r24, 0x05	; 5
 168:	8b 7e       	andi	r24, 0xEB	; 235
 16a:	85 b9       	out	0x05, r24	; 5
		PORTB |= (0 << PORTB2) | ( 1<< PORTB3) | (0 << PORTB4);
 16c:	2b 9a       	sbi	0x05, 3	; 5
		printf("case 2\n");
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 176:	08 95       	ret
		
		case 3:

		PORTB &= 0xEF;
 178:	2c 98       	cbi	0x05, 4	; 5
		PORTB |= (1 << PORTB2) | ( 1<< PORTB3) | (0 << PORTB4);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	85 b9       	out	0x05, r24	; 5
		printf("case 3\n");
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 188:	08 95       	ret

		case 4:

		PORTB &= 0xF3;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	83 7f       	andi	r24, 0xF3	; 243
 18e:	85 b9       	out	0x05, r24	; 5
		PORTB |= (0 << PORTB2) | ( 0<< PORTB3) | (1 << PORTB4);
 190:	2c 9a       	sbi	0x05, 4	; 5
		printf("case 4\n");
 192:	89 e3       	ldi	r24, 0x39	; 57
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 19a:	08 95       	ret
		
		case 5:
		
		PORTB &= 0xF7;
 19c:	2b 98       	cbi	0x05, 3	; 5
		PORTB |= (1 << PORTB2) | ( 0 << PORTB3) | (1 << PORTB4);
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	84 61       	ori	r24, 0x14	; 20
 1a2:	85 b9       	out	0x05, r24	; 5
		printf("case 5\n");
 1a4:	80 e4       	ldi	r24, 0x40	; 64
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 1ac:	08 95       	ret

		case 6:
		
		PORTB &= 0xFB;
 1ae:	2a 98       	cbi	0x05, 2	; 5
		PORTB |= (0 << PORTB2) | ( 1<< PORTB3) | (1 << PORTB4);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	88 61       	ori	r24, 0x18	; 24
 1b4:	85 b9       	out	0x05, r24	; 5
		printf("case 6\n");
 1b6:	87 e4       	ldi	r24, 0x47	; 71
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 21 03 	call	0x642	; 0x642 <puts>
		break;
 1be:	08 95       	ret

		default:

		PORTB &= 0xFF;
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1 << PORTB2) | ( 1 << PORTB3) | (1 << PORTB4);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8c 61       	ori	r24, 0x1C	; 28
 1c8:	85 b9       	out	0x05, r24	; 5
		printf("case 7\n");
 1ca:	8e e4       	ldi	r24, 0x4E	; 78
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 21 03 	call	0x642	; 0x642 <puts>
 1d2:	08 95       	ret

000001d4 <SetupADC>:

	}
}

void SetupADC(void){
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); // 128 prescaling
 1d4:	ea e7       	ldi	r30, 0x7A	; 122
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);//free mode
 1de:	80 81       	ld	r24, Z
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);//power up ADC
 1e4:	80 81       	ld	r24, Z
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	80 83       	st	Z, r24


	ADMUX |= (1 << REFS0); //AVcc
 1ea:	ac e7       	ldi	r26, 0x7C	; 124
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	8c 91       	ld	r24, X
 1f0:	80 64       	ori	r24, 0x40	; 64
 1f2:	8c 93       	st	X, r24
	//ADMUX &= ~(1 << REFS1);
	ADCSRB |= (0 <<ADTS2) | (0 << ADTS1) | (0 <<ADTS0);//free running
 1f4:	ab e7       	ldi	r26, 0x7B	; 123
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	8c 91       	ld	r24, X
 1fa:	8c 93       	st	X, r24

	ADCSRA |= (1 << ADSC);//start converting
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <GenerateDiscrete>:
}

void GenerateDiscrete(int Val){

	switch (Val){
 204:	87 30       	cpi	r24, 0x07	; 7
 206:	91 05       	cpc	r25, r1
 208:	d0 f4       	brcc	.+52     	; 0x23e <GenerateDiscrete+0x3a>
 20a:	fc 01       	movw	r30, r24
 20c:	e5 5c       	subi	r30, 0xC5	; 197
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__tablejump2__>

		case 0:
		
		OCR0A = 120;
 214:	88 e7       	ldi	r24, 0x78	; 120
 216:	87 bd       	out	0x27, r24	; 39
		break;
 218:	08 95       	ret

		case 1:
		
		OCR0A = 106;
 21a:	8a e6       	ldi	r24, 0x6A	; 106
 21c:	87 bd       	out	0x27, r24	; 39
		break;
 21e:	08 95       	ret

		case 2:
		
		OCR0A = 95;
 220:	8f e5       	ldi	r24, 0x5F	; 95
 222:	87 bd       	out	0x27, r24	; 39
		break;
 224:	08 95       	ret
		
		case 3:

		OCR0A = 90;
 226:	8a e5       	ldi	r24, 0x5A	; 90
 228:	87 bd       	out	0x27, r24	; 39
		break;
 22a:	08 95       	ret

		case 4:
		
		OCR0A = 80;
 22c:	80 e5       	ldi	r24, 0x50	; 80
 22e:	87 bd       	out	0x27, r24	; 39
		break;
 230:	08 95       	ret
		
		case 5:
		
		OCR0A = 71;
 232:	87 e4       	ldi	r24, 0x47	; 71
 234:	87 bd       	out	0x27, r24	; 39
		break;
 236:	08 95       	ret

		case 6:
		
		OCR0A = 63;
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	87 bd       	out	0x27, r24	; 39
		break;
 23c:	08 95       	ret

		default:

		OCR0A = 60;
 23e:	8c e3       	ldi	r24, 0x3C	; 60
 240:	87 bd       	out	0x27, r24	; 39
 242:	08 95       	ret

00000244 <GenerateConti>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f e3       	ldi	r18, 0x3F	; 63
 246:	3d e0       	ldi	r19, 0x0D	; 13
 248:	43 e0       	ldi	r20, 0x03	; 3
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	40 40       	sbci	r20, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <GenerateConti+0x6>
 252:	00 c0       	rjmp	.+0      	; 0x254 <GenerateConti+0x10>
 254:	00 00       	nop
	}
}

void GenerateConti(long nTimeInterval){
	_delay_ms(1000);
	OCR0A =(int)(256 - (nTimeInterval -200) / 8);
 256:	ab 01       	movw	r20, r22
 258:	bc 01       	movw	r22, r24
 25a:	48 5c       	subi	r20, 0xC8	; 200
 25c:	51 09       	sbc	r21, r1
 25e:	61 09       	sbc	r22, r1
 260:	71 09       	sbc	r23, r1
 262:	db 01       	movw	r26, r22
 264:	ca 01       	movw	r24, r20
 266:	1a f4       	brpl	.+6      	; 0x26e <GenerateConti+0x2a>
 268:	07 96       	adiw	r24, 0x07	; 7
 26a:	a1 1d       	adc	r26, r1
 26c:	b1 1d       	adc	r27, r1
 26e:	68 94       	set
 270:	12 f8       	bld	r1, 2
 272:	b5 95       	asr	r27
 274:	a7 95       	ror	r26
 276:	97 95       	ror	r25
 278:	87 95       	ror	r24
 27a:	16 94       	lsr	r1
 27c:	d1 f7       	brne	.-12     	; 0x272 <GenerateConti+0x2e>
 27e:	81 95       	neg	r24
 280:	87 bd       	out	0x27, r24	; 39
	
	printf("Continous %d",OCR0A); //
 282:	87 b5       	in	r24, 0x27	; 39
 284:	1f 92       	push	r1
 286:	8f 93       	push	r24
 288:	85 e5       	ldi	r24, 0x55	; 85
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	0e 94 0b 03 	call	0x616	; 0x616 <printf>
}
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	08 95       	ret

0000029e <main>:

int main(void)
{
	/* Replace with your application code */
	uart_init();
 29e:	0e 94 7c 00 	call	0xf8	; 0xf8 <uart_init>
	//DDRC |= 0x01;// PC0
	DDRB = 0x3E;
 2a2:	8e e3       	ldi	r24, 0x3E	; 62
 2a4:	84 b9       	out	0x04, r24	; 4

	DDRB |= 0x22; //set PB1 as output
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	82 62       	ori	r24, 0x22	; 34
 2aa:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x22; //set PB1 high
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	82 62       	ori	r24, 0x22	; 34
 2b0:	85 b9       	out	0x05, r24	; 5

	TCNT1 = 0; //set timer1 to zero
 2b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	//TCCR1A |= (1 << COM1A0); // set output to zero compare
	TIMSK1 |= (1 << OCIE1A); //output compare enable
 2ba:	ef e6       	ldi	r30, 0x6F	; 111
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	80 83       	st	Z, r24
	OCR1A = 80; //5us
 2c4:	80 e5       	ldi	r24, 0x50	; 80
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCCR1A |= (1 << COM1A0); //toggle(compare mode), output to PB1
 2d0:	e0 e8       	ldi	r30, 0x80	; 128
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS10); // prescaling clk/1
 2da:	e1 e8       	ldi	r30, 0x81	; 129
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	80 83       	st	Z, r24
	sei();
 2e4:	78 94       	sei
		
	DDRD |= 0x40;
 2e6:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= 0x40;
 2e8:	84 b5       	in	r24, 0x24	; 36
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= 0x02;
 2ee:	84 b5       	in	r24, 0x24	; 36
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0x03;
 2f4:	85 b5       	in	r24, 0x25	; 37
 2f6:	83 60       	ori	r24, 0x03	; 3
 2f8:	85 bd       	out	0x25, r24	; 37
	SetupADC();
 2fa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SetupADC>
	//	_delay_ms(50);
	while (1)
	{
		printf("%d\n",ADC);
 2fe:	08 e7       	ldi	r16, 0x78	; 120
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	cd e6       	ldi	r28, 0x6D	; 109
 304:	d1 e0       	ldi	r29, 0x01	; 1
 306:	f8 01       	movw	r30, r16
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	9f 93       	push	r25
 30e:	8f 93       	push	r24
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	0e 94 0b 03 	call	0x616	; 0x616 <printf>
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	f2 cf       	rjmp	.-28     	; 0x306 <main+0x68>

00000322 <__vector_11>:
}




ISR(TIMER1_COMPA_vect){ 
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	
	fl = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <fl+0x1>
 33c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <fl>
	//TIMSK1 ^= (1 << OCIE1A);
	DDRB |= 0x02; //set PB0 as input
 340:	21 9a       	sbi	0x04, 1	; 4
	TIMSK1 |= (1 << ICIE1); // input capture enable, check PB0
 342:	ef e6       	ldi	r30, 0x6F	; 111
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 62       	ori	r24, 0x20	; 32
 34a:	80 83       	st	Z, r24
	TCCR1B |= (1 << ICES1); //input rising edge select
 34c:	e1 e8       	ldi	r30, 0x81	; 129
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	80 64       	ori	r24, 0x40	; 64
 354:	80 83       	st	Z, r24

	OCR1A = 3200; //200us
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	9c e0       	ldi	r25, 0x0C	; 12
 35a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 35e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	
	//nLoopCountDown = 0;
	//TIMSK1 = (0 << OCIE1A); 
		
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <__vector_10>:

ISR(TIMER1_CAPT_vect){
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31

	//PORTB ^= (1 << PORTB4);	
	TCCR1B ^= (1 << ICES1); // input falling edge capture
 39a:	e1 e8       	ldi	r30, 0x81	; 129
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	90 81       	ld	r25, Z
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	89 27       	eor	r24, r25
 3a4:	80 83       	st	Z, r24

	if (bIsTriggered){
 3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3aa:	88 23       	and	r24, r24
 3ac:	f1 f0       	breq	.+60     	; 0x3ea <__vector_10+0x76>
		//printf("down edge triggered");
		nTimeStart = ICR1; //START
 3ae:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 3b2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3b6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
 3ba:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__data_end+0x1>
		nLoopCount = 0;
 3be:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <nLoopCount+0x1>
 3c2:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <nLoopCount>
		printf("Start time %d\n", nTimeStart);
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	82 e6       	ldi	r24, 0x62	; 98
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	9f 93       	push	r25
 3d0:	8f 93       	push	r24
 3d2:	0e 94 0b 03 	call	0x616	; 0x616 <printf>
		//printf("Start time %d\n", (int)nTimeStart);

		TIMSK1 |= (1 << TOIE1);  //overflow timer enabled
 3d6:	ef e6       	ldi	r30, 0x6F	; 111
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	81 60       	ori	r24, 0x01	; 1
 3de:	80 83       	st	Z, r24
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	90 c0       	rjmp	.+288    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
	}

	else{

		//printf("up edge triggered");
		TIMSK1 = (0 << TOIE1); //disable overflow interrupt
 3ea:	ef e6       	ldi	r30, 0x6F	; 111
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	10 82       	st	Z, r1
		TIMSK1 = (1 << OCIE1A); //enable output compare interupt
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	80 83       	st	Z, r24

		nTimeEnd = (long)(ICR1 + nLoopCount * 256 * 256 / 2);
 3f4:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 3f8:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	40 93 9a 01 	sts	0x019A, r20	; 0x80019a <nTimeEnd>
 404:	50 93 9b 01 	sts	0x019B, r21	; 0x80019b <nTimeEnd+0x1>
 408:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <nTimeEnd+0x2>
 40c:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <nTimeEnd+0x3>
		//printf("ICR %ld", (long)ICR1);
		//printf("end %ld", (long)nTimeEnd);
		//printf("start %d", nTimeStart);
		
		nTimeInterval = (long)nTimeEnd - (long)nTimeStart;
 410:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
 414:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <__data_end+0x1>
 418:	09 2e       	mov	r0, r25
 41a:	00 0c       	add	r0, r0
 41c:	aa 0b       	sbc	r26, r26
 41e:	bb 0b       	sbc	r27, r27
 420:	48 1b       	sub	r20, r24
 422:	59 0b       	sbc	r21, r25
 424:	6a 0b       	sbc	r22, r26
 426:	7b 0b       	sbc	r23, r27
 428:	40 93 90 01 	sts	0x0190, r20	; 0x800190 <nTimeInterval>
 42c:	50 93 91 01 	sts	0x0191, r21	; 0x800191 <nTimeInterval+0x1>
 430:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <nTimeInterval+0x2>
 434:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <nTimeInterval+0x3>
		printf("the  time interval is %ld \n", nTimeInterval/16);
 438:	db 01       	movw	r26, r22
 43a:	ca 01       	movw	r24, r20
 43c:	77 23       	and	r23, r23
 43e:	1c f4       	brge	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	0f 96       	adiw	r24, 0x0f	; 15
 442:	a1 1d       	adc	r26, r1
 444:	b1 1d       	adc	r27, r1
 446:	68 94       	set
 448:	13 f8       	bld	r1, 3
 44a:	b5 95       	asr	r27
 44c:	a7 95       	ror	r26
 44e:	97 95       	ror	r25
 450:	87 95       	ror	r24
 452:	16 94       	lsr	r1
 454:	d1 f7       	brne	.-12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 456:	bf 93       	push	r27
 458:	af 93       	push	r26
 45a:	9f 93       	push	r25
 45c:	8f 93       	push	r24
 45e:	81 e7       	ldi	r24, 0x71	; 113
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	9f 93       	push	r25
 464:	8f 93       	push	r24
 466:	0e 94 0b 03 	call	0x616	; 0x616 <printf>
		
		int Val = (nTimeInterval/16 -260) / 155;
 46a:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <nTimeInterval>
 46e:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <nTimeInterval+0x1>
 472:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <nTimeInterval+0x2>
 476:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <nTimeInterval+0x3>
		//GenerateDiscrete(Val);
		
		if(PINB & (1 <<PINB5)){
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	1d 9b       	sbis	0x03, 5	; 3
 488:	22 c0       	rjmp	.+68     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			
			GenerateDiscrete(Val);
 48a:	8b 01       	movw	r16, r22
 48c:	9c 01       	movw	r18, r24
 48e:	99 23       	and	r25, r25
 490:	24 f4       	brge	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 492:	01 5f       	subi	r16, 0xF1	; 241
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	2f 4f       	sbci	r18, 0xFF	; 255
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	d9 01       	movw	r26, r18
 49c:	c8 01       	movw	r24, r16
 49e:	68 94       	set
 4a0:	13 f8       	bld	r1, 3
 4a2:	b5 95       	asr	r27
 4a4:	a7 95       	ror	r26
 4a6:	97 95       	ror	r25
 4a8:	87 95       	ror	r24
 4aa:	16 94       	lsr	r1
 4ac:	d1 f7       	brne	.-12     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4ae:	bc 01       	movw	r22, r24
 4b0:	cd 01       	movw	r24, r26
 4b2:	64 50       	subi	r22, 0x04	; 4
 4b4:	71 40       	sbci	r23, 0x01	; 1
 4b6:	81 09       	sbc	r24, r1
 4b8:	91 09       	sbc	r25, r1
 4ba:	2b e9       	ldi	r18, 0x9B	; 155
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	0e 94 b5 02 	call	0x56a	; 0x56a <__divmodsi4>
 4c6:	c9 01       	movw	r24, r18
 4c8:	0e 94 02 01 	call	0x204	; 0x204 <GenerateDiscrete>
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
		}
		else{
			GenerateConti(nTimeInterval);
 4ce:	0e 94 22 01 	call	0x244	; 0x244 <GenerateConti>
			
		}
		int Val_Light = (ADC - 40) / 123;
 4d2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 4d6:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		GenerateVol(Val_Light);
 4da:	48 52       	subi	r20, 0x28	; 40
 4dc:	51 09       	sbc	r21, r1
 4de:	9a 01       	movw	r18, r20
 4e0:	a9 e6       	ldi	r26, 0x69	; 105
 4e2:	ba e0       	ldi	r27, 0x0A	; 10
 4e4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__umulhisi3>
 4e8:	48 1b       	sub	r20, r24
 4ea:	59 0b       	sbc	r21, r25
 4ec:	56 95       	lsr	r21
 4ee:	47 95       	ror	r20
 4f0:	84 0f       	add	r24, r20
 4f2:	95 1f       	adc	r25, r21
 4f4:	00 24       	eor	r0, r0
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	00 1c       	adc	r0, r0
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	00 1c       	adc	r0, r0
 502:	89 2f       	mov	r24, r25
 504:	90 2d       	mov	r25, r0
 506:	0e 94 97 00 	call	0x12e	; 0x12e <GenerateVol>
		//nTimeStart = 0;
		//nTimeEnd = 0;	

	}

	bIsTriggered ^= true;
 50a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	89 27       	eor	r24, r25
 512:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	7f 91       	pop	r23
 524:	6f 91       	pop	r22
 526:	5f 91       	pop	r21
 528:	4f 91       	pop	r20
 52a:	3f 91       	pop	r19
 52c:	2f 91       	pop	r18
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <__vector_13>:

ISR(TIMER1_OVF_vect){
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
	nLoopCount++;
 54a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <nLoopCount>
 54e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <nLoopCount+0x1>
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <nLoopCount+0x1>
 558:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <nLoopCount>

}
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__divmodsi4>:
 56a:	05 2e       	mov	r0, r21
 56c:	97 fb       	bst	r25, 7
 56e:	1e f4       	brtc	.+6      	; 0x576 <__divmodsi4+0xc>
 570:	00 94       	com	r0
 572:	0e 94 cc 02 	call	0x598	; 0x598 <__negsi2>
 576:	57 fd       	sbrc	r21, 7
 578:	07 d0       	rcall	.+14     	; 0x588 <__divmodsi4_neg2>
 57a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__udivmodsi4>
 57e:	07 fc       	sbrc	r0, 7
 580:	03 d0       	rcall	.+6      	; 0x588 <__divmodsi4_neg2>
 582:	4e f4       	brtc	.+18     	; 0x596 <__divmodsi4_exit>
 584:	0c 94 cc 02 	jmp	0x598	; 0x598 <__negsi2>

00000588 <__divmodsi4_neg2>:
 588:	50 95       	com	r21
 58a:	40 95       	com	r20
 58c:	30 95       	com	r19
 58e:	21 95       	neg	r18
 590:	3f 4f       	sbci	r19, 0xFF	; 255
 592:	4f 4f       	sbci	r20, 0xFF	; 255
 594:	5f 4f       	sbci	r21, 0xFF	; 255

00000596 <__divmodsi4_exit>:
 596:	08 95       	ret

00000598 <__negsi2>:
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	08 95       	ret

000005a8 <__tablejump2__>:
 5a8:	ee 0f       	add	r30, r30
 5aa:	ff 1f       	adc	r31, r31
 5ac:	05 90       	lpm	r0, Z+
 5ae:	f4 91       	lpm	r31, Z
 5b0:	e0 2d       	mov	r30, r0
 5b2:	09 94       	ijmp

000005b4 <__umulhisi3>:
 5b4:	a2 9f       	mul	r26, r18
 5b6:	b0 01       	movw	r22, r0
 5b8:	b3 9f       	mul	r27, r19
 5ba:	c0 01       	movw	r24, r0
 5bc:	a3 9f       	mul	r26, r19
 5be:	70 0d       	add	r23, r0
 5c0:	81 1d       	adc	r24, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	91 1d       	adc	r25, r1
 5c6:	b2 9f       	mul	r27, r18
 5c8:	70 0d       	add	r23, r0
 5ca:	81 1d       	adc	r24, r1
 5cc:	11 24       	eor	r1, r1
 5ce:	91 1d       	adc	r25, r1
 5d0:	08 95       	ret

000005d2 <__udivmodsi4>:
 5d2:	a1 e2       	ldi	r26, 0x21	; 33
 5d4:	1a 2e       	mov	r1, r26
 5d6:	aa 1b       	sub	r26, r26
 5d8:	bb 1b       	sub	r27, r27
 5da:	fd 01       	movw	r30, r26
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__udivmodsi4_ep>

000005de <__udivmodsi4_loop>:
 5de:	aa 1f       	adc	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	ee 1f       	adc	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	a2 17       	cp	r26, r18
 5e8:	b3 07       	cpc	r27, r19
 5ea:	e4 07       	cpc	r30, r20
 5ec:	f5 07       	cpc	r31, r21
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__udivmodsi4_ep>
 5f0:	a2 1b       	sub	r26, r18
 5f2:	b3 0b       	sbc	r27, r19
 5f4:	e4 0b       	sbc	r30, r20
 5f6:	f5 0b       	sbc	r31, r21

000005f8 <__udivmodsi4_ep>:
 5f8:	66 1f       	adc	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	1a 94       	dec	r1
 602:	69 f7       	brne	.-38     	; 0x5de <__udivmodsi4_loop>
 604:	60 95       	com	r22
 606:	70 95       	com	r23
 608:	80 95       	com	r24
 60a:	90 95       	com	r25
 60c:	9b 01       	movw	r18, r22
 60e:	ac 01       	movw	r20, r24
 610:	bd 01       	movw	r22, r26
 612:	cf 01       	movw	r24, r30
 614:	08 95       	ret

00000616 <printf>:
 616:	a0 e0       	ldi	r26, 0x00	; 0
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	e1 e1       	ldi	r30, 0x11	; 17
 61c:	f3 e0       	ldi	r31, 0x03	; 3
 61e:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__prologue_saves__+0x20>
 622:	ae 01       	movw	r20, r28
 624:	4b 5f       	subi	r20, 0xFB	; 251
 626:	5f 4f       	sbci	r21, 0xFF	; 255
 628:	fa 01       	movw	r30, r20
 62a:	61 91       	ld	r22, Z+
 62c:	71 91       	ld	r23, Z+
 62e:	af 01       	movw	r20, r30
 630:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__iob+0x2>
 634:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__iob+0x3>
 638:	0e 94 51 03 	call	0x6a2	; 0x6a2 <vfprintf>
 63c:	e2 e0       	ldi	r30, 0x02	; 2
 63e:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__epilogue_restores__+0x20>

00000642 <puts>:
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__iob+0x2>
 64e:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <__iob+0x3>
 652:	23 81       	ldd	r18, Z+3	; 0x03
 654:	21 ff       	sbrs	r18, 1
 656:	1b c0       	rjmp	.+54     	; 0x68e <puts+0x4c>
 658:	8c 01       	movw	r16, r24
 65a:	d0 e0       	ldi	r29, 0x00	; 0
 65c:	c0 e0       	ldi	r28, 0x00	; 0
 65e:	f8 01       	movw	r30, r16
 660:	81 91       	ld	r24, Z+
 662:	8f 01       	movw	r16, r30
 664:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <__iob+0x2>
 668:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <__iob+0x3>
 66c:	db 01       	movw	r26, r22
 66e:	18 96       	adiw	r26, 0x08	; 8
 670:	ed 91       	ld	r30, X+
 672:	fc 91       	ld	r31, X
 674:	19 97       	sbiw	r26, 0x09	; 9
 676:	88 23       	and	r24, r24
 678:	31 f0       	breq	.+12     	; 0x686 <puts+0x44>
 67a:	09 95       	icall
 67c:	89 2b       	or	r24, r25
 67e:	79 f3       	breq	.-34     	; 0x65e <puts+0x1c>
 680:	df ef       	ldi	r29, 0xFF	; 255
 682:	cf ef       	ldi	r28, 0xFF	; 255
 684:	ec cf       	rjmp	.-40     	; 0x65e <puts+0x1c>
 686:	8a e0       	ldi	r24, 0x0A	; 10
 688:	09 95       	icall
 68a:	89 2b       	or	r24, r25
 68c:	19 f0       	breq	.+6      	; 0x694 <puts+0x52>
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	9f ef       	ldi	r25, 0xFF	; 255
 692:	02 c0       	rjmp	.+4      	; 0x698 <puts+0x56>
 694:	8d 2f       	mov	r24, r29
 696:	9c 2f       	mov	r25, r28
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <vfprintf>:
 6a2:	ab e0       	ldi	r26, 0x0B	; 11
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	e7 e5       	ldi	r30, 0x57	; 87
 6a8:	f3 e0       	ldi	r31, 0x03	; 3
 6aa:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__prologue_saves__>
 6ae:	6c 01       	movw	r12, r24
 6b0:	7b 01       	movw	r14, r22
 6b2:	8a 01       	movw	r16, r20
 6b4:	fc 01       	movw	r30, r24
 6b6:	17 82       	std	Z+7, r1	; 0x07
 6b8:	16 82       	std	Z+6, r1	; 0x06
 6ba:	83 81       	ldd	r24, Z+3	; 0x03
 6bc:	81 ff       	sbrs	r24, 1
 6be:	cc c1       	rjmp	.+920    	; 0xa58 <__stack+0x159>
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	3c 01       	movw	r6, r24
 6c6:	f6 01       	movw	r30, r12
 6c8:	93 81       	ldd	r25, Z+3	; 0x03
 6ca:	f7 01       	movw	r30, r14
 6cc:	93 fd       	sbrc	r25, 3
 6ce:	85 91       	lpm	r24, Z+
 6d0:	93 ff       	sbrs	r25, 3
 6d2:	81 91       	ld	r24, Z+
 6d4:	7f 01       	movw	r14, r30
 6d6:	88 23       	and	r24, r24
 6d8:	09 f4       	brne	.+2      	; 0x6dc <vfprintf+0x3a>
 6da:	ba c1       	rjmp	.+884    	; 0xa50 <__stack+0x151>
 6dc:	85 32       	cpi	r24, 0x25	; 37
 6de:	39 f4       	brne	.+14     	; 0x6ee <vfprintf+0x4c>
 6e0:	93 fd       	sbrc	r25, 3
 6e2:	85 91       	lpm	r24, Z+
 6e4:	93 ff       	sbrs	r25, 3
 6e6:	81 91       	ld	r24, Z+
 6e8:	7f 01       	movw	r14, r30
 6ea:	85 32       	cpi	r24, 0x25	; 37
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <vfprintf+0x56>
 6ee:	b6 01       	movw	r22, r12
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 6f6:	e7 cf       	rjmp	.-50     	; 0x6c6 <vfprintf+0x24>
 6f8:	91 2c       	mov	r9, r1
 6fa:	21 2c       	mov	r2, r1
 6fc:	31 2c       	mov	r3, r1
 6fe:	ff e1       	ldi	r31, 0x1F	; 31
 700:	f3 15       	cp	r31, r3
 702:	d8 f0       	brcs	.+54     	; 0x73a <vfprintf+0x98>
 704:	8b 32       	cpi	r24, 0x2B	; 43
 706:	79 f0       	breq	.+30     	; 0x726 <vfprintf+0x84>
 708:	38 f4       	brcc	.+14     	; 0x718 <vfprintf+0x76>
 70a:	80 32       	cpi	r24, 0x20	; 32
 70c:	79 f0       	breq	.+30     	; 0x72c <vfprintf+0x8a>
 70e:	83 32       	cpi	r24, 0x23	; 35
 710:	a1 f4       	brne	.+40     	; 0x73a <vfprintf+0x98>
 712:	23 2d       	mov	r18, r3
 714:	20 61       	ori	r18, 0x10	; 16
 716:	1d c0       	rjmp	.+58     	; 0x752 <vfprintf+0xb0>
 718:	8d 32       	cpi	r24, 0x2D	; 45
 71a:	61 f0       	breq	.+24     	; 0x734 <vfprintf+0x92>
 71c:	80 33       	cpi	r24, 0x30	; 48
 71e:	69 f4       	brne	.+26     	; 0x73a <vfprintf+0x98>
 720:	23 2d       	mov	r18, r3
 722:	21 60       	ori	r18, 0x01	; 1
 724:	16 c0       	rjmp	.+44     	; 0x752 <vfprintf+0xb0>
 726:	83 2d       	mov	r24, r3
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	38 2e       	mov	r3, r24
 72c:	e3 2d       	mov	r30, r3
 72e:	e4 60       	ori	r30, 0x04	; 4
 730:	3e 2e       	mov	r3, r30
 732:	2a c0       	rjmp	.+84     	; 0x788 <vfprintf+0xe6>
 734:	f3 2d       	mov	r31, r3
 736:	f8 60       	ori	r31, 0x08	; 8
 738:	1d c0       	rjmp	.+58     	; 0x774 <vfprintf+0xd2>
 73a:	37 fc       	sbrc	r3, 7
 73c:	2d c0       	rjmp	.+90     	; 0x798 <vfprintf+0xf6>
 73e:	20 ed       	ldi	r18, 0xD0	; 208
 740:	28 0f       	add	r18, r24
 742:	2a 30       	cpi	r18, 0x0A	; 10
 744:	40 f0       	brcs	.+16     	; 0x756 <vfprintf+0xb4>
 746:	8e 32       	cpi	r24, 0x2E	; 46
 748:	b9 f4       	brne	.+46     	; 0x778 <vfprintf+0xd6>
 74a:	36 fc       	sbrc	r3, 6
 74c:	81 c1       	rjmp	.+770    	; 0xa50 <__stack+0x151>
 74e:	23 2d       	mov	r18, r3
 750:	20 64       	ori	r18, 0x40	; 64
 752:	32 2e       	mov	r3, r18
 754:	19 c0       	rjmp	.+50     	; 0x788 <vfprintf+0xe6>
 756:	36 fe       	sbrs	r3, 6
 758:	06 c0       	rjmp	.+12     	; 0x766 <vfprintf+0xc4>
 75a:	8a e0       	ldi	r24, 0x0A	; 10
 75c:	98 9e       	mul	r9, r24
 75e:	20 0d       	add	r18, r0
 760:	11 24       	eor	r1, r1
 762:	92 2e       	mov	r9, r18
 764:	11 c0       	rjmp	.+34     	; 0x788 <vfprintf+0xe6>
 766:	ea e0       	ldi	r30, 0x0A	; 10
 768:	2e 9e       	mul	r2, r30
 76a:	20 0d       	add	r18, r0
 76c:	11 24       	eor	r1, r1
 76e:	22 2e       	mov	r2, r18
 770:	f3 2d       	mov	r31, r3
 772:	f0 62       	ori	r31, 0x20	; 32
 774:	3f 2e       	mov	r3, r31
 776:	08 c0       	rjmp	.+16     	; 0x788 <vfprintf+0xe6>
 778:	8c 36       	cpi	r24, 0x6C	; 108
 77a:	21 f4       	brne	.+8      	; 0x784 <vfprintf+0xe2>
 77c:	83 2d       	mov	r24, r3
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	38 2e       	mov	r3, r24
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0xe6>
 784:	88 36       	cpi	r24, 0x68	; 104
 786:	41 f4       	brne	.+16     	; 0x798 <vfprintf+0xf6>
 788:	f7 01       	movw	r30, r14
 78a:	93 fd       	sbrc	r25, 3
 78c:	85 91       	lpm	r24, Z+
 78e:	93 ff       	sbrs	r25, 3
 790:	81 91       	ld	r24, Z+
 792:	7f 01       	movw	r14, r30
 794:	81 11       	cpse	r24, r1
 796:	b3 cf       	rjmp	.-154    	; 0x6fe <vfprintf+0x5c>
 798:	98 2f       	mov	r25, r24
 79a:	9f 7d       	andi	r25, 0xDF	; 223
 79c:	95 54       	subi	r25, 0x45	; 69
 79e:	93 30       	cpi	r25, 0x03	; 3
 7a0:	28 f4       	brcc	.+10     	; 0x7ac <vfprintf+0x10a>
 7a2:	0c 5f       	subi	r16, 0xFC	; 252
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	9f e3       	ldi	r25, 0x3F	; 63
 7a8:	99 83       	std	Y+1, r25	; 0x01
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <vfprintf+0x124>
 7ac:	83 36       	cpi	r24, 0x63	; 99
 7ae:	31 f0       	breq	.+12     	; 0x7bc <vfprintf+0x11a>
 7b0:	83 37       	cpi	r24, 0x73	; 115
 7b2:	71 f0       	breq	.+28     	; 0x7d0 <vfprintf+0x12e>
 7b4:	83 35       	cpi	r24, 0x53	; 83
 7b6:	09 f0       	breq	.+2      	; 0x7ba <vfprintf+0x118>
 7b8:	59 c0       	rjmp	.+178    	; 0x86c <vfprintf+0x1ca>
 7ba:	21 c0       	rjmp	.+66     	; 0x7fe <vfprintf+0x15c>
 7bc:	f8 01       	movw	r30, r16
 7be:	80 81       	ld	r24, Z
 7c0:	89 83       	std	Y+1, r24	; 0x01
 7c2:	0e 5f       	subi	r16, 0xFE	; 254
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	88 24       	eor	r8, r8
 7c8:	83 94       	inc	r8
 7ca:	91 2c       	mov	r9, r1
 7cc:	53 01       	movw	r10, r6
 7ce:	13 c0       	rjmp	.+38     	; 0x7f6 <vfprintf+0x154>
 7d0:	28 01       	movw	r4, r16
 7d2:	f2 e0       	ldi	r31, 0x02	; 2
 7d4:	4f 0e       	add	r4, r31
 7d6:	51 1c       	adc	r5, r1
 7d8:	f8 01       	movw	r30, r16
 7da:	a0 80       	ld	r10, Z
 7dc:	b1 80       	ldd	r11, Z+1	; 0x01
 7de:	36 fe       	sbrs	r3, 6
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <vfprintf+0x146>
 7e2:	69 2d       	mov	r22, r9
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0x14a>
 7e8:	6f ef       	ldi	r22, 0xFF	; 255
 7ea:	7f ef       	ldi	r23, 0xFF	; 255
 7ec:	c5 01       	movw	r24, r10
 7ee:	0e 94 3d 05 	call	0xa7a	; 0xa7a <strnlen>
 7f2:	4c 01       	movw	r8, r24
 7f4:	82 01       	movw	r16, r4
 7f6:	f3 2d       	mov	r31, r3
 7f8:	ff 77       	andi	r31, 0x7F	; 127
 7fa:	3f 2e       	mov	r3, r31
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <vfprintf+0x188>
 7fe:	28 01       	movw	r4, r16
 800:	22 e0       	ldi	r18, 0x02	; 2
 802:	42 0e       	add	r4, r18
 804:	51 1c       	adc	r5, r1
 806:	f8 01       	movw	r30, r16
 808:	a0 80       	ld	r10, Z
 80a:	b1 80       	ldd	r11, Z+1	; 0x01
 80c:	36 fe       	sbrs	r3, 6
 80e:	03 c0       	rjmp	.+6      	; 0x816 <vfprintf+0x174>
 810:	69 2d       	mov	r22, r9
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	02 c0       	rjmp	.+4      	; 0x81a <vfprintf+0x178>
 816:	6f ef       	ldi	r22, 0xFF	; 255
 818:	7f ef       	ldi	r23, 0xFF	; 255
 81a:	c5 01       	movw	r24, r10
 81c:	0e 94 32 05 	call	0xa64	; 0xa64 <strnlen_P>
 820:	4c 01       	movw	r8, r24
 822:	f3 2d       	mov	r31, r3
 824:	f0 68       	ori	r31, 0x80	; 128
 826:	3f 2e       	mov	r3, r31
 828:	82 01       	movw	r16, r4
 82a:	33 fc       	sbrc	r3, 3
 82c:	1b c0       	rjmp	.+54     	; 0x864 <vfprintf+0x1c2>
 82e:	82 2d       	mov	r24, r2
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	88 16       	cp	r8, r24
 834:	99 06       	cpc	r9, r25
 836:	b0 f4       	brcc	.+44     	; 0x864 <vfprintf+0x1c2>
 838:	b6 01       	movw	r22, r12
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 842:	2a 94       	dec	r2
 844:	f4 cf       	rjmp	.-24     	; 0x82e <vfprintf+0x18c>
 846:	f5 01       	movw	r30, r10
 848:	37 fc       	sbrc	r3, 7
 84a:	85 91       	lpm	r24, Z+
 84c:	37 fe       	sbrs	r3, 7
 84e:	81 91       	ld	r24, Z+
 850:	5f 01       	movw	r10, r30
 852:	b6 01       	movw	r22, r12
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 85a:	21 10       	cpse	r2, r1
 85c:	2a 94       	dec	r2
 85e:	21 e0       	ldi	r18, 0x01	; 1
 860:	82 1a       	sub	r8, r18
 862:	91 08       	sbc	r9, r1
 864:	81 14       	cp	r8, r1
 866:	91 04       	cpc	r9, r1
 868:	71 f7       	brne	.-36     	; 0x846 <vfprintf+0x1a4>
 86a:	e8 c0       	rjmp	.+464    	; 0xa3c <__stack+0x13d>
 86c:	84 36       	cpi	r24, 0x64	; 100
 86e:	11 f0       	breq	.+4      	; 0x874 <vfprintf+0x1d2>
 870:	89 36       	cpi	r24, 0x69	; 105
 872:	41 f5       	brne	.+80     	; 0x8c4 <vfprintf+0x222>
 874:	f8 01       	movw	r30, r16
 876:	37 fe       	sbrs	r3, 7
 878:	07 c0       	rjmp	.+14     	; 0x888 <vfprintf+0x1e6>
 87a:	60 81       	ld	r22, Z
 87c:	71 81       	ldd	r23, Z+1	; 0x01
 87e:	82 81       	ldd	r24, Z+2	; 0x02
 880:	93 81       	ldd	r25, Z+3	; 0x03
 882:	0c 5f       	subi	r16, 0xFC	; 252
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	08 c0       	rjmp	.+16     	; 0x898 <vfprintf+0x1f6>
 888:	60 81       	ld	r22, Z
 88a:	71 81       	ldd	r23, Z+1	; 0x01
 88c:	07 2e       	mov	r0, r23
 88e:	00 0c       	add	r0, r0
 890:	88 0b       	sbc	r24, r24
 892:	99 0b       	sbc	r25, r25
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	f3 2d       	mov	r31, r3
 89a:	ff 76       	andi	r31, 0x6F	; 111
 89c:	3f 2e       	mov	r3, r31
 89e:	97 ff       	sbrs	r25, 7
 8a0:	09 c0       	rjmp	.+18     	; 0x8b4 <vfprintf+0x212>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	f0 68       	ori	r31, 0x80	; 128
 8b2:	3f 2e       	mov	r3, r31
 8b4:	2a e0       	ldi	r18, 0x0A	; 10
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	a3 01       	movw	r20, r6
 8ba:	0e 94 84 05 	call	0xb08	; 0xb08 <__ultoa_invert>
 8be:	88 2e       	mov	r8, r24
 8c0:	86 18       	sub	r8, r6
 8c2:	45 c0       	rjmp	.+138    	; 0x94e <__stack+0x4f>
 8c4:	85 37       	cpi	r24, 0x75	; 117
 8c6:	31 f4       	brne	.+12     	; 0x8d4 <vfprintf+0x232>
 8c8:	23 2d       	mov	r18, r3
 8ca:	2f 7e       	andi	r18, 0xEF	; 239
 8cc:	b2 2e       	mov	r11, r18
 8ce:	2a e0       	ldi	r18, 0x0A	; 10
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	25 c0       	rjmp	.+74     	; 0x91e <__stack+0x1f>
 8d4:	93 2d       	mov	r25, r3
 8d6:	99 7f       	andi	r25, 0xF9	; 249
 8d8:	b9 2e       	mov	r11, r25
 8da:	8f 36       	cpi	r24, 0x6F	; 111
 8dc:	c1 f0       	breq	.+48     	; 0x90e <__stack+0xf>
 8de:	18 f4       	brcc	.+6      	; 0x8e6 <vfprintf+0x244>
 8e0:	88 35       	cpi	r24, 0x58	; 88
 8e2:	79 f0       	breq	.+30     	; 0x902 <__stack+0x3>
 8e4:	b5 c0       	rjmp	.+362    	; 0xa50 <__stack+0x151>
 8e6:	80 37       	cpi	r24, 0x70	; 112
 8e8:	19 f0       	breq	.+6      	; 0x8f0 <vfprintf+0x24e>
 8ea:	88 37       	cpi	r24, 0x78	; 120
 8ec:	21 f0       	breq	.+8      	; 0x8f6 <vfprintf+0x254>
 8ee:	b0 c0       	rjmp	.+352    	; 0xa50 <__stack+0x151>
 8f0:	e9 2f       	mov	r30, r25
 8f2:	e0 61       	ori	r30, 0x10	; 16
 8f4:	be 2e       	mov	r11, r30
 8f6:	b4 fe       	sbrs	r11, 4
 8f8:	0d c0       	rjmp	.+26     	; 0x914 <__stack+0x15>
 8fa:	fb 2d       	mov	r31, r11
 8fc:	f4 60       	ori	r31, 0x04	; 4
 8fe:	bf 2e       	mov	r11, r31
 900:	09 c0       	rjmp	.+18     	; 0x914 <__stack+0x15>
 902:	34 fe       	sbrs	r3, 4
 904:	0a c0       	rjmp	.+20     	; 0x91a <__stack+0x1b>
 906:	29 2f       	mov	r18, r25
 908:	26 60       	ori	r18, 0x06	; 6
 90a:	b2 2e       	mov	r11, r18
 90c:	06 c0       	rjmp	.+12     	; 0x91a <__stack+0x1b>
 90e:	28 e0       	ldi	r18, 0x08	; 8
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	05 c0       	rjmp	.+10     	; 0x91e <__stack+0x1f>
 914:	20 e1       	ldi	r18, 0x10	; 16
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
 91a:	20 e1       	ldi	r18, 0x10	; 16
 91c:	32 e0       	ldi	r19, 0x02	; 2
 91e:	f8 01       	movw	r30, r16
 920:	b7 fe       	sbrs	r11, 7
 922:	07 c0       	rjmp	.+14     	; 0x932 <__stack+0x33>
 924:	60 81       	ld	r22, Z
 926:	71 81       	ldd	r23, Z+1	; 0x01
 928:	82 81       	ldd	r24, Z+2	; 0x02
 92a:	93 81       	ldd	r25, Z+3	; 0x03
 92c:	0c 5f       	subi	r16, 0xFC	; 252
 92e:	1f 4f       	sbci	r17, 0xFF	; 255
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0x3f>
 932:	60 81       	ld	r22, Z
 934:	71 81       	ldd	r23, Z+1	; 0x01
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 5f       	subi	r16, 0xFE	; 254
 93c:	1f 4f       	sbci	r17, 0xFF	; 255
 93e:	a3 01       	movw	r20, r6
 940:	0e 94 84 05 	call	0xb08	; 0xb08 <__ultoa_invert>
 944:	88 2e       	mov	r8, r24
 946:	86 18       	sub	r8, r6
 948:	fb 2d       	mov	r31, r11
 94a:	ff 77       	andi	r31, 0x7F	; 127
 94c:	3f 2e       	mov	r3, r31
 94e:	36 fe       	sbrs	r3, 6
 950:	0d c0       	rjmp	.+26     	; 0x96c <__stack+0x6d>
 952:	23 2d       	mov	r18, r3
 954:	2e 7f       	andi	r18, 0xFE	; 254
 956:	a2 2e       	mov	r10, r18
 958:	89 14       	cp	r8, r9
 95a:	58 f4       	brcc	.+22     	; 0x972 <__stack+0x73>
 95c:	34 fe       	sbrs	r3, 4
 95e:	0b c0       	rjmp	.+22     	; 0x976 <__stack+0x77>
 960:	32 fc       	sbrc	r3, 2
 962:	09 c0       	rjmp	.+18     	; 0x976 <__stack+0x77>
 964:	83 2d       	mov	r24, r3
 966:	8e 7e       	andi	r24, 0xEE	; 238
 968:	a8 2e       	mov	r10, r24
 96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x77>
 96c:	b8 2c       	mov	r11, r8
 96e:	a3 2c       	mov	r10, r3
 970:	03 c0       	rjmp	.+6      	; 0x978 <__stack+0x79>
 972:	b8 2c       	mov	r11, r8
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x79>
 976:	b9 2c       	mov	r11, r9
 978:	a4 fe       	sbrs	r10, 4
 97a:	0f c0       	rjmp	.+30     	; 0x99a <__stack+0x9b>
 97c:	fe 01       	movw	r30, r28
 97e:	e8 0d       	add	r30, r8
 980:	f1 1d       	adc	r31, r1
 982:	80 81       	ld	r24, Z
 984:	80 33       	cpi	r24, 0x30	; 48
 986:	21 f4       	brne	.+8      	; 0x990 <__stack+0x91>
 988:	9a 2d       	mov	r25, r10
 98a:	99 7e       	andi	r25, 0xE9	; 233
 98c:	a9 2e       	mov	r10, r25
 98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0xa3>
 990:	a2 fe       	sbrs	r10, 2
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <__stack+0xa1>
 994:	b3 94       	inc	r11
 996:	b3 94       	inc	r11
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <__stack+0xa3>
 99a:	8a 2d       	mov	r24, r10
 99c:	86 78       	andi	r24, 0x86	; 134
 99e:	09 f0       	breq	.+2      	; 0x9a2 <__stack+0xa3>
 9a0:	b3 94       	inc	r11
 9a2:	a3 fc       	sbrc	r10, 3
 9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <__stack+0xc9>
 9a6:	a0 fe       	sbrs	r10, 0
 9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <__stack+0xb7>
 9aa:	b2 14       	cp	r11, r2
 9ac:	88 f4       	brcc	.+34     	; 0x9d0 <__stack+0xd1>
 9ae:	28 0c       	add	r2, r8
 9b0:	92 2c       	mov	r9, r2
 9b2:	9b 18       	sub	r9, r11
 9b4:	0e c0       	rjmp	.+28     	; 0x9d2 <__stack+0xd3>
 9b6:	b2 14       	cp	r11, r2
 9b8:	60 f4       	brcc	.+24     	; 0x9d2 <__stack+0xd3>
 9ba:	b6 01       	movw	r22, r12
 9bc:	80 e2       	ldi	r24, 0x20	; 32
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 9c4:	b3 94       	inc	r11
 9c6:	f7 cf       	rjmp	.-18     	; 0x9b6 <__stack+0xb7>
 9c8:	b2 14       	cp	r11, r2
 9ca:	18 f4       	brcc	.+6      	; 0x9d2 <__stack+0xd3>
 9cc:	2b 18       	sub	r2, r11
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	98 2c       	mov	r9, r8
 9d2:	21 2c       	mov	r2, r1
 9d4:	a4 fe       	sbrs	r10, 4
 9d6:	10 c0       	rjmp	.+32     	; 0x9f8 <__stack+0xf9>
 9d8:	b6 01       	movw	r22, r12
 9da:	80 e3       	ldi	r24, 0x30	; 48
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 9e2:	a2 fe       	sbrs	r10, 2
 9e4:	17 c0       	rjmp	.+46     	; 0xa14 <__stack+0x115>
 9e6:	a1 fc       	sbrc	r10, 1
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__stack+0xf1>
 9ea:	88 e7       	ldi	r24, 0x78	; 120
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
 9f0:	88 e5       	ldi	r24, 0x58	; 88
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	b6 01       	movw	r22, r12
 9f6:	0c c0       	rjmp	.+24     	; 0xa10 <__stack+0x111>
 9f8:	8a 2d       	mov	r24, r10
 9fa:	86 78       	andi	r24, 0x86	; 134
 9fc:	59 f0       	breq	.+22     	; 0xa14 <__stack+0x115>
 9fe:	a1 fe       	sbrs	r10, 1
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x107>
 a02:	8b e2       	ldi	r24, 0x2B	; 43
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <__stack+0x109>
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	a7 fc       	sbrc	r10, 7
 a0a:	8d e2       	ldi	r24, 0x2D	; 45
 a0c:	b6 01       	movw	r22, r12
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 a14:	89 14       	cp	r8, r9
 a16:	38 f4       	brcc	.+14     	; 0xa26 <__stack+0x127>
 a18:	b6 01       	movw	r22, r12
 a1a:	80 e3       	ldi	r24, 0x30	; 48
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 a22:	9a 94       	dec	r9
 a24:	f7 cf       	rjmp	.-18     	; 0xa14 <__stack+0x115>
 a26:	8a 94       	dec	r8
 a28:	f3 01       	movw	r30, r6
 a2a:	e8 0d       	add	r30, r8
 a2c:	f1 1d       	adc	r31, r1
 a2e:	80 81       	ld	r24, Z
 a30:	b6 01       	movw	r22, r12
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 a38:	81 10       	cpse	r8, r1
 a3a:	f5 cf       	rjmp	.-22     	; 0xa26 <__stack+0x127>
 a3c:	22 20       	and	r2, r2
 a3e:	09 f4       	brne	.+2      	; 0xa42 <__stack+0x143>
 a40:	42 ce       	rjmp	.-892    	; 0x6c6 <vfprintf+0x24>
 a42:	b6 01       	movw	r22, r12
 a44:	80 e2       	ldi	r24, 0x20	; 32
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 a4c:	2a 94       	dec	r2
 a4e:	f6 cf       	rjmp	.-20     	; 0xa3c <__stack+0x13d>
 a50:	f6 01       	movw	r30, r12
 a52:	86 81       	ldd	r24, Z+6	; 0x06
 a54:	97 81       	ldd	r25, Z+7	; 0x07
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <__stack+0x15d>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	9f ef       	ldi	r25, 0xFF	; 255
 a5c:	2b 96       	adiw	r28, 0x0b	; 11
 a5e:	e2 e1       	ldi	r30, 0x12	; 18
 a60:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__epilogue_restores__>

00000a64 <strnlen_P>:
 a64:	fc 01       	movw	r30, r24
 a66:	05 90       	lpm	r0, Z+
 a68:	61 50       	subi	r22, 0x01	; 1
 a6a:	70 40       	sbci	r23, 0x00	; 0
 a6c:	01 10       	cpse	r0, r1
 a6e:	d8 f7       	brcc	.-10     	; 0xa66 <strnlen_P+0x2>
 a70:	80 95       	com	r24
 a72:	90 95       	com	r25
 a74:	8e 0f       	add	r24, r30
 a76:	9f 1f       	adc	r25, r31
 a78:	08 95       	ret

00000a7a <strnlen>:
 a7a:	fc 01       	movw	r30, r24
 a7c:	61 50       	subi	r22, 0x01	; 1
 a7e:	70 40       	sbci	r23, 0x00	; 0
 a80:	01 90       	ld	r0, Z+
 a82:	01 10       	cpse	r0, r1
 a84:	d8 f7       	brcc	.-10     	; 0xa7c <strnlen+0x2>
 a86:	80 95       	com	r24
 a88:	90 95       	com	r25
 a8a:	8e 0f       	add	r24, r30
 a8c:	9f 1f       	adc	r25, r31
 a8e:	08 95       	ret

00000a90 <fputc>:
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
 a98:	fb 01       	movw	r30, r22
 a9a:	23 81       	ldd	r18, Z+3	; 0x03
 a9c:	21 fd       	sbrc	r18, 1
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <fputc+0x16>
 aa0:	8f ef       	ldi	r24, 0xFF	; 255
 aa2:	9f ef       	ldi	r25, 0xFF	; 255
 aa4:	2c c0       	rjmp	.+88     	; 0xafe <fputc+0x6e>
 aa6:	22 ff       	sbrs	r18, 2
 aa8:	16 c0       	rjmp	.+44     	; 0xad6 <fputc+0x46>
 aaa:	46 81       	ldd	r20, Z+6	; 0x06
 aac:	57 81       	ldd	r21, Z+7	; 0x07
 aae:	24 81       	ldd	r18, Z+4	; 0x04
 ab0:	35 81       	ldd	r19, Z+5	; 0x05
 ab2:	42 17       	cp	r20, r18
 ab4:	53 07       	cpc	r21, r19
 ab6:	44 f4       	brge	.+16     	; 0xac8 <fputc+0x38>
 ab8:	a0 81       	ld	r26, Z
 aba:	b1 81       	ldd	r27, Z+1	; 0x01
 abc:	9d 01       	movw	r18, r26
 abe:	2f 5f       	subi	r18, 0xFF	; 255
 ac0:	3f 4f       	sbci	r19, 0xFF	; 255
 ac2:	31 83       	std	Z+1, r19	; 0x01
 ac4:	20 83       	st	Z, r18
 ac6:	8c 93       	st	X, r24
 ac8:	26 81       	ldd	r18, Z+6	; 0x06
 aca:	37 81       	ldd	r19, Z+7	; 0x07
 acc:	2f 5f       	subi	r18, 0xFF	; 255
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	37 83       	std	Z+7, r19	; 0x07
 ad2:	26 83       	std	Z+6, r18	; 0x06
 ad4:	14 c0       	rjmp	.+40     	; 0xafe <fputc+0x6e>
 ad6:	8b 01       	movw	r16, r22
 ad8:	ec 01       	movw	r28, r24
 ada:	fb 01       	movw	r30, r22
 adc:	00 84       	ldd	r0, Z+8	; 0x08
 ade:	f1 85       	ldd	r31, Z+9	; 0x09
 ae0:	e0 2d       	mov	r30, r0
 ae2:	09 95       	icall
 ae4:	89 2b       	or	r24, r25
 ae6:	e1 f6       	brne	.-72     	; 0xaa0 <fputc+0x10>
 ae8:	d8 01       	movw	r26, r16
 aea:	16 96       	adiw	r26, 0x06	; 6
 aec:	8d 91       	ld	r24, X+
 aee:	9c 91       	ld	r25, X
 af0:	17 97       	sbiw	r26, 0x07	; 7
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	17 96       	adiw	r26, 0x07	; 7
 af6:	9c 93       	st	X, r25
 af8:	8e 93       	st	-X, r24
 afa:	16 97       	sbiw	r26, 0x06	; 6
 afc:	ce 01       	movw	r24, r28
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	1f 91       	pop	r17
 b04:	0f 91       	pop	r16
 b06:	08 95       	ret

00000b08 <__ultoa_invert>:
 b08:	fa 01       	movw	r30, r20
 b0a:	aa 27       	eor	r26, r26
 b0c:	28 30       	cpi	r18, 0x08	; 8
 b0e:	51 f1       	breq	.+84     	; 0xb64 <__ultoa_invert+0x5c>
 b10:	20 31       	cpi	r18, 0x10	; 16
 b12:	81 f1       	breq	.+96     	; 0xb74 <__ultoa_invert+0x6c>
 b14:	e8 94       	clt
 b16:	6f 93       	push	r22
 b18:	6e 7f       	andi	r22, 0xFE	; 254
 b1a:	6e 5f       	subi	r22, 0xFE	; 254
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	af 4f       	sbci	r26, 0xFF	; 255
 b24:	b1 e0       	ldi	r27, 0x01	; 1
 b26:	3e d0       	rcall	.+124    	; 0xba4 <__ultoa_invert+0x9c>
 b28:	b4 e0       	ldi	r27, 0x04	; 4
 b2a:	3c d0       	rcall	.+120    	; 0xba4 <__ultoa_invert+0x9c>
 b2c:	67 0f       	add	r22, r23
 b2e:	78 1f       	adc	r23, r24
 b30:	89 1f       	adc	r24, r25
 b32:	9a 1f       	adc	r25, r26
 b34:	a1 1d       	adc	r26, r1
 b36:	68 0f       	add	r22, r24
 b38:	79 1f       	adc	r23, r25
 b3a:	8a 1f       	adc	r24, r26
 b3c:	91 1d       	adc	r25, r1
 b3e:	a1 1d       	adc	r26, r1
 b40:	6a 0f       	add	r22, r26
 b42:	71 1d       	adc	r23, r1
 b44:	81 1d       	adc	r24, r1
 b46:	91 1d       	adc	r25, r1
 b48:	a1 1d       	adc	r26, r1
 b4a:	20 d0       	rcall	.+64     	; 0xb8c <__ultoa_invert+0x84>
 b4c:	09 f4       	brne	.+2      	; 0xb50 <__ultoa_invert+0x48>
 b4e:	68 94       	set
 b50:	3f 91       	pop	r19
 b52:	2a e0       	ldi	r18, 0x0A	; 10
 b54:	26 9f       	mul	r18, r22
 b56:	11 24       	eor	r1, r1
 b58:	30 19       	sub	r19, r0
 b5a:	30 5d       	subi	r19, 0xD0	; 208
 b5c:	31 93       	st	Z+, r19
 b5e:	de f6       	brtc	.-74     	; 0xb16 <__ultoa_invert+0xe>
 b60:	cf 01       	movw	r24, r30
 b62:	08 95       	ret
 b64:	46 2f       	mov	r20, r22
 b66:	47 70       	andi	r20, 0x07	; 7
 b68:	40 5d       	subi	r20, 0xD0	; 208
 b6a:	41 93       	st	Z+, r20
 b6c:	b3 e0       	ldi	r27, 0x03	; 3
 b6e:	0f d0       	rcall	.+30     	; 0xb8e <__ultoa_invert+0x86>
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__ultoa_invert+0x5c>
 b72:	f6 cf       	rjmp	.-20     	; 0xb60 <__ultoa_invert+0x58>
 b74:	46 2f       	mov	r20, r22
 b76:	4f 70       	andi	r20, 0x0F	; 15
 b78:	40 5d       	subi	r20, 0xD0	; 208
 b7a:	4a 33       	cpi	r20, 0x3A	; 58
 b7c:	18 f0       	brcs	.+6      	; 0xb84 <__ultoa_invert+0x7c>
 b7e:	49 5d       	subi	r20, 0xD9	; 217
 b80:	31 fd       	sbrc	r19, 1
 b82:	40 52       	subi	r20, 0x20	; 32
 b84:	41 93       	st	Z+, r20
 b86:	02 d0       	rcall	.+4      	; 0xb8c <__ultoa_invert+0x84>
 b88:	a9 f7       	brne	.-22     	; 0xb74 <__ultoa_invert+0x6c>
 b8a:	ea cf       	rjmp	.-44     	; 0xb60 <__ultoa_invert+0x58>
 b8c:	b4 e0       	ldi	r27, 0x04	; 4
 b8e:	a6 95       	lsr	r26
 b90:	97 95       	ror	r25
 b92:	87 95       	ror	r24
 b94:	77 95       	ror	r23
 b96:	67 95       	ror	r22
 b98:	ba 95       	dec	r27
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__ultoa_invert+0x86>
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	61 05       	cpc	r22, r1
 ba0:	71 05       	cpc	r23, r1
 ba2:	08 95       	ret
 ba4:	9b 01       	movw	r18, r22
 ba6:	ac 01       	movw	r20, r24
 ba8:	0a 2e       	mov	r0, r26
 baa:	06 94       	lsr	r0
 bac:	57 95       	ror	r21
 bae:	47 95       	ror	r20
 bb0:	37 95       	ror	r19
 bb2:	27 95       	ror	r18
 bb4:	ba 95       	dec	r27
 bb6:	c9 f7       	brne	.-14     	; 0xbaa <__ultoa_invert+0xa2>
 bb8:	62 0f       	add	r22, r18
 bba:	73 1f       	adc	r23, r19
 bbc:	84 1f       	adc	r24, r20
 bbe:	95 1f       	adc	r25, r21
 bc0:	a0 1d       	adc	r26, r0
 bc2:	08 95       	ret

00000bc4 <__prologue_saves__>:
 bc4:	2f 92       	push	r2
 bc6:	3f 92       	push	r3
 bc8:	4f 92       	push	r4
 bca:	5f 92       	push	r5
 bcc:	6f 92       	push	r6
 bce:	7f 92       	push	r7
 bd0:	8f 92       	push	r8
 bd2:	9f 92       	push	r9
 bd4:	af 92       	push	r10
 bd6:	bf 92       	push	r11
 bd8:	cf 92       	push	r12
 bda:	df 92       	push	r13
 bdc:	ef 92       	push	r14
 bde:	ff 92       	push	r15
 be0:	0f 93       	push	r16
 be2:	1f 93       	push	r17
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	cd b7       	in	r28, 0x3d	; 61
 bea:	de b7       	in	r29, 0x3e	; 62
 bec:	ca 1b       	sub	r28, r26
 bee:	db 0b       	sbc	r29, r27
 bf0:	0f b6       	in	r0, 0x3f	; 63
 bf2:	f8 94       	cli
 bf4:	de bf       	out	0x3e, r29	; 62
 bf6:	0f be       	out	0x3f, r0	; 63
 bf8:	cd bf       	out	0x3d, r28	; 61
 bfa:	09 94       	ijmp

00000bfc <__epilogue_restores__>:
 bfc:	2a 88       	ldd	r2, Y+18	; 0x12
 bfe:	39 88       	ldd	r3, Y+17	; 0x11
 c00:	48 88       	ldd	r4, Y+16	; 0x10
 c02:	5f 84       	ldd	r5, Y+15	; 0x0f
 c04:	6e 84       	ldd	r6, Y+14	; 0x0e
 c06:	7d 84       	ldd	r7, Y+13	; 0x0d
 c08:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c0e:	b9 84       	ldd	r11, Y+9	; 0x09
 c10:	c8 84       	ldd	r12, Y+8	; 0x08
 c12:	df 80       	ldd	r13, Y+7	; 0x07
 c14:	ee 80       	ldd	r14, Y+6	; 0x06
 c16:	fd 80       	ldd	r15, Y+5	; 0x05
 c18:	0c 81       	ldd	r16, Y+4	; 0x04
 c1a:	1b 81       	ldd	r17, Y+3	; 0x03
 c1c:	aa 81       	ldd	r26, Y+2	; 0x02
 c1e:	b9 81       	ldd	r27, Y+1	; 0x01
 c20:	ce 0f       	add	r28, r30
 c22:	d1 1d       	adc	r29, r1
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	f8 94       	cli
 c28:	de bf       	out	0x3e, r29	; 62
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	cd bf       	out	0x3d, r28	; 61
 c2e:	ed 01       	movw	r28, r26
 c30:	08 95       	ret

00000c32 <_exit>:
 c32:	f8 94       	cli

00000c34 <__stop_program>:
 c34:	ff cf       	rjmp	.-2      	; 0xc34 <__stop_program>
